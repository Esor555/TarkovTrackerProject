classDiagram
    class User {
        - id: int
        - name: string
        - level: int
        - faction: Faction
       
    }
    class Progress{
        - currentTasks: list<Task>
        - currentHideout: list<Hideout>
        - currentItems: list<Item>
    }
    class UserService {
        -UserRepository repository 
        -UserValidator validator
        +GetAll(): List<User>
        +AddUser(): (User user)
        +UpdateUserName(User user, string newName)
        +UpdateUserLevel(User user, int Newlevel)
        +UpdateUserFaction(User user, Faction newFaction)
    }
    class UserRepository{
        -Users : list<User>
        +GetAll() : list<User> 
        +AddUser(User user)
        +GetUserById(Int id) : User
        +DeleteUser(int id)
    }
    class UserValidator{
        ~ValidateUser(User user)
        ~ValidateId(int id)
        ~ValidateName(string name)
        ~ValidateLevel(int level)
        ~ValidateFaction(Faction faction)
    }

    class HideoutController {
        - hideoutList: list<Hideout>
        + AddHideout(): void
        + RemoveHideout(): void
        + EditHideout(): void
        + GetHideout(): Hideout
    }

    class Hideout {
        - name: string
        - id: int
        - level: int
        - levelupRequirement: RequirementHideout
    }

    class RequirementHideout {
        - level: int?
        - skills: list<string>?
        - items: ItemRequirement
        - hideoutReq: list<Hideout>?
        + RequirementsMet(): bool
    }

    class Task {
        - name: string
        - id: int
        - description: string
        - unlockRequirements: RequirementTask
        - CompletionRequirements: RequirementTask
    }

    class RequirementTask {
        - level: int?
        - prevTasks: list<Task>?
        - items: ItemRequirement?
        - mission: list<string>?
        + RequirementsMet(): bool
    }

    class ItemRequirement {
        - itemsNeeded: list<Item>
        - itemsHave: list<Item>
        + CompleteCheck(): bool
    }

    class ItemController {
        - itemList: list<Item>
        + AddItem(): void
        + RemoveItem(): void
        + EditItem(): void
        + GetItem(): Item
    }

    class Item {
        - name: string
        - id: int
    }

    class Faction {
        <<enumeration>>
        USAC
        BEAR
    }

    UserController --> User
    HideoutController --> Hideout
    User --> Faction
    User --> Task : "currentTasks"
    User --> Hideout : "currentHideout"
    User --> Item : "currentItems"
    Hideout --> RequirementHideout : "levelupRequirement"
    Task --> RequirementTask : "unlockRequirements"
    Task --> RequirementTask : "CompletionRequirements"
    RequirementHideout --> ItemRequirement : "items"
    RequirementTask --> ItemRequirement : "items"
    ItemRequirement --> Item : "itemsNeeded"
    ItemRequirement --> Item : "itemsHave"
    ItemController --> Item
