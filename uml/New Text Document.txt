classDiagram
    class IuserRepository{
        +GetAll() : List~User~
        +Add(User user)
        +GetById(int id): User
        +Delete(int id)
    }
        class IHideoutRepository{
        +GetAll() : List~Hideout~
        +Add(Hideout hideout)
        +GetById(int id): Hideout
        +Delete(int id)
    }
        class ITaskRepository{
        +GetAll() : List~Task~
        +Add(Task task)
        +GetById(int id): Task
        +Delete(int id)
    }
    class IService~T~ {
        +GetAll(): List~T~
        +Add(T item)
        +Remove(int id)
    }



    class Program{
        +Main()
    }
    
    class User {
        - id: int
        - name: string
        - level: int
        - faction: Faction
    }

    class UserService {
        -UserRepository repository 
        -UserValidator validator
        +UpdateUserName(User user, string newName)
        +UpdateUserLevel(User user, int newLevel)
        +UpdateUserFaction(User user, Faction newFaction)
    }
    
    class UserRepository {
        -users: list<User>
    }

    class UserValidator {
        ~ValidateUser(User user): bool
        ~ValidateId(int id): bool
        ~ValidateName(string name): bool
        ~ValidateLevel(int level): bool
        ~ValidateFaction(Faction faction): bool
    }

    class Hideout {
        - name: string
        - id: int
        - level: int
        - levelupRequirement: RequirementHideout
    }

    class HideoutService {
        -HideoutRepository repository
        -HideoutValidator validator
        +UpgradeHideout(Hideout hideout)
    }

    class HideoutRepository {
        -hideouts: list<Hideout>
    }

    class HideoutValidator {
        ~ValidateHideout(Hideout hideout): bool
        ~ValidateId(int id): bool
        ~ValidateName(string name): bool
        ~ValidateLevel(int level): bool
    }

    class Task {
        - name: string
        - id: int
        - description: string
        - unlockRequirements: RequirementTask
        - completionRequirements: RequirementTask
    }

    class TaskService {
        -TaskRepository repository
        -TaskValidator validator
        +CompleteTask(Task task)
    }

    class TaskRepository {
        -tasks: list<Task>
    }

    class TaskValidator {
        //addlater
        ~ValidateRequirements(RequirementTask requirement)
    }


    class Faction {
        <<enumeration>>
        USAC
        BEAR
    }

    Program --> IService
    IService <|-- UserService
    IService <|-- HideoutService
    IService <|-- TaskService
  
    UserService --> IuserRepository
    IuserRepository <|-- UserRepository
    
    UserService --> UserValidator
    UserRepository --> User
    UserValidator -- User
    
    HideoutService --> IHideoutRepository
    IHideoutRepository <|-- HideoutRepository
    HideoutService --> HideoutValidator
    HideoutRepository --> Hideout
    HideoutValidator -- Hideout

    TaskService --> ITaskRepository
    ITaskRepository <|-- TaskRepository
    TaskService --> TaskValidator
    TaskRepository --> Task
    TaskValidator -- Task

    User --> Faction
    User --> Task : "currentTasks"
    User --> Hideout : "currentHideout"
   
