classDiagram
direction LR

    class User {
        +Id : int
        +Name : string
        +PasswordHash : string
        +Level : int
        +Role : string
        +Faction : Faction
        +CreatedAt : DateTime
        +User(int id, string name, string passwordHash, int level, string role, Faction faction, DateTime createdAt)
    }

    class Quest {
        +Id : int
        +Title : string
        +Description : string
        +RequiredLevel : int
        +PreviousQuestId : int?
        +TraderId : int
        +WikiLink : string
        +Quest(int id, string title, string description, int requiredLevel, int? previousQuestId, int traderId, string wikiLink)
    }

    class Item {
        +Id : int
        +Name : string
        +Type : string
        +Item(int id, string name, string type)
    }

    class Trader {
        +Id : int
        +Name : string
        +Description : string
        +Trader(int id, string name, string description)
    }

    class UserQuest {
        +UserId : int
        +QuestId : int
        +Status : string
        +Quest : Quest
        +UserQuest(int userId, int questId, string status)
    }

    class UserQuestItemProgress {
        +UserId : int
        +QuestId : int
        +ItemId : int
        +AmountCollected : int
        +UserQuestItemProgress(int userId, int questId, int itemId, int amountCollected)
    }

    class UserHideout {
        +UserId : int
        +StationId : int
        +StationLevel : int
        +UserHideout(int userId, int stationId, int stationLevel)
    }

    class HideoutStation {
        +Id : int
        +Name : string
        +HideoutStation(int id, string name)
    }

    class HideoutStationUpgrade {
        +StationId : int
        +ItemId : int
        +Amount : int
        +RequiredLevel : int
        +HideoutStationUpgrade(int stationId, int itemId, int amount, int requiredLevel)
    }

    class UserDTO {
        +Id : int?
        +Username : string
        +Level : int?
        +Faction : Faction?
        +passwordhash : string
        +role : string?
        +UserDTO(int? id, string username, int? level, Faction? faction, string passwordhash, string? role)
    }

    class HideoutDTO {
        +id : int
        +name : string
        +HideoutDTO(int id, string name)
    }

    class IQuestRepository {
        +GetAll() : List~Quest~
        +GetById(int id) : Quest
        +Add(Quest quest) : bool
        +Update(Quest quest) : bool
        +Delete(int id) : bool
    }

    class IUserQuestRepository {
        +getall(int userId) : List~UserQuest~
        +Add(UserQuest userQuest) : bool
        +Remove(int userId, int questId) : bool
        +Update(UserQuest userQuest) : bool
    }

    class IUserRepository {
        +GetByName(string username) : User
        +GetAll() : List~User~
        +GetById(int id) : User
        +Add(UserDTO userDto) : bool
        +Update(UserDTO userDto) : bool
        +Delete(int id) : bool
    }

    class IhideoutstationRepository {
        +GetAll() : List~HideoutStation~
        +GetById(int id) : HideoutStation
        +Add(HideoutStation station) : bool
        +Update(HideoutStation station) : bool
        +Delete(int id) : bool
    }

    class IhideoutstationupgradeRepository {
        +GetAll() : List~HideoutStationUpgrade~
        +Add(HideoutStationUpgrade upgrade) : bool
        +Update(HideoutStationUpgrade upgrade) : bool
        +Delete(int stationId, int itemId) : bool
    }

    class ITraderRepository {
        +GetAll() : List~Trader~
        +GetById(int id) : Trader
        +Add(Trader trader) : bool
        +Update(Trader trader) : bool
        +Delete(int id) : bool
    }


    class QuestRepository {
        +connectionString : string
        +QuestRepository(string connectionString)
    }

    class UserQuestRepository {
        +connectionString : string
        +UserQuestRepository(string connectionString)
    }

    class UserRepository {
        +connectionString : string
        +UserRepository(string connectionString)
    }

    class HideoutStationRepository {
        +connectionString : string
        +HideoutStationRepository(string connectionString)
    }

    class HideoutStationUpgradeRepository {
        +connectionString : string
        +HideoutStationUpgradeRepository(string connectionString)
    }

    class TraderRepository {
        +connectionString : string
        +TraderRepository(string connectionString)
    }

    class QuestService {
        +GetAllQuests() : List~Quest~
        +GetQuestById(int id) : Quest
        +GetQuestByTitle(string title) : Quest
        +AddQuest(Quest quest) : bool
        +UpdateQuest(Quest quest) : bool
        +DeleteQuest(int id) : bool
        +QuestService(string connectionString)
    }

    class UserQuestService {
        +GetAllUserQuests(int userId) : List~UserQuest~
        +Add(UserQuest userQuest) : bool
        +Remove(int userId, int questId) : bool
        +Update(UserQuest userQuest) : bool
        +UserQuestService(IUserQuestRepository repository)
    }

    class UserService {
        +GetByName(string username) : User
        +GetAllUsers() : List~User~
        +GetUserById(int id) : User
        +AddUser(User user) : bool
        +DeleteUser(int id) : bool
        +UpdateUser(User user) : bool
        +UserService(string connectionString)
    }

    class HideoutStationService {
        +GetAllStations() : List~HideoutStation~
        +GetStationById(int id) : HideoutStation
        +AddStation(HideoutStation station) : bool
        +UpdateStation(HideoutStation station) : bool
        +DeleteStation(int id) : bool
        +HideoutStationService(string connectionString)
    }

    class IValidator~T~ {
        +Validate(T entity) : ValidationResult
    }

    class ValidationResult {
        +IsValid : bool
        +Errors : List~string~
        +ValidationResult()
    }

    class UserValidator {
        +UserValidator()
        +Validate(User user) : ValidationResult
    }

    class QuestValidator {
        +QuestValidator()
        +Validate(Quest quest) : ValidationResult
    }

    class HideoutStationValidator {
        +HideoutStationValidator()
        +Validate(HideoutStation station) : ValidationResult
    }

    class UserQuestValidator {
        +UserQuestValidator()
        +Validate(UserQuest userQuest) : ValidationResult
    }

    <<interface>> IQuestRepository
    <<interface>> IUserQuestRepository
    <<interface>> IUserRepository
    <<interface>> IhideoutstationRepository
    <<interface>> IhideoutstationupgradeRepository
    <<interface>> ITraderRepository
    <<interface>> IValidator

    IValidator <|.. UserValidator
    IValidator <|.. QuestValidator
    IValidator <|.. HideoutStationValidator
    IValidator <|.. UserQuestValidator

    IQuestRepository <|.. QuestRepository
    IUserQuestRepository <|.. UserQuestRepository
    IUserRepository <|.. UserRepository
    IhideoutstationRepository <|.. HideoutStationRepository
    IhideoutstationupgradeRepository <|.. HideoutStationUpgradeRepository
    ITraderRepository <|.. TraderRepository


    UserService ..> UserValidator : "uses"
    QuestService ..> QuestValidator : "uses"
    HideoutStationService ..> HideoutStationValidator : "uses"
    UserQuestService ..> UserQuestValidator : "uses"

    UserValidator ..> ValidationResult
    QuestValidator ..> ValidationResult
    HideoutStationValidator ..> ValidationResult
    UserQuestValidator ..> ValidationResult

    UserQuest --> Quest : "has"
    UserQuestItemProgress --> User : "refers to"
    UserQuestItemProgress --> Quest : "refers to"
    UserQuestItemProgress --> Item : "refers to"
    UserHideout --> User : "belongs to"
    UserHideout --> HideoutStation : "belongs to"
    HideoutStationUpgrade --> HideoutStation : "upgrades"
    HideoutStationUpgrade --> Item : "requires"
    Quest --> Trader : "given by"
    UserQuest --> User : "belongs to"

    QuestService ..> IQuestRepository : "uses"
    UserQuestService ..> IUserQuestRepository : "uses"
    UserService ..> IUserRepository : "uses"
    HideoutStationService ..> IhideoutstationRepository : "uses"
    

    QuestService --> Quest : "returns/uses"
    QuestService --> List~Quest~ : "returns"
    UserQuestService --> UserQuest : "returns/uses"
    UserQuestService --> List~UserQuest~ : "returns"
    UserService --> User : "returns/uses"
    UserService --> List~User~ : "returns"
    HideoutStationService --> HideoutStation : "returns/uses"
    HideoutStationService --> List~HideoutStation~ : "returns"
